{"version":3,"sources":["components/image/components/ImageInput.tsx","components/image/components/Form/Form.tsx","components/image/components/Form/style.ts","components/image/hooks/crud.ts","components/image/services/FakeImageService.ts","components/image/schemas/create.schema.ts","containers/Image/Create/CreateImage.tsx","components/tooltip/components/Tooltip.tsx","components/image/components/GridElement/GridElement.tsx","components/image/components/GridElement/styles.ts","containers/Image/List/ImageList.tsx","containers/Image/List/styles.ts","components/image/components/VIew/View.tsx","containers/Image/Show/ShowImage.tsx","components/image/schemas/update.schema.ts","containers/Image/Update/Update.tsx","components/layouts/components/DashboardLayout/DashboardLayout.tsx","components/layouts/components/DashboardLayout/styles.ts","containers/App/App.tsx","index.tsx"],"names":["ImageInput","register","oldPreview","useState","preview","setPreview","handleUploadFile","useCallback","e","file","target","files","reader","FileReader","onload","result","readAsDataURL","imageForPreview","Grid","style","width","src","alt","Typography","Button","color","variant","component","ref","type","accept","display","name","onChange","useStyles","makeStyles","theme","createStyles","buttonsContainer","justifyContent","errorLabel","ImageForm","onSubmit","onCancel","defaultValues","schema","useForm","resolver","yupResolver","handleSubmit","control","errors","classes","Container","maxWidth","container","spacing","item","xs","FormControl","fullWidth","margin","className","image","message","sm","md","TextField","inputRef","label","tooltip","text","as","Select","MenuItem","value","position","render","onClick","imageService","db","dbName","imageStoreName","data","this","initDb","add","entityId","get","dbEntity","substituteImageWithUrl","id","delete","getAll","imageDbEntities","imagesWithLink","map","imageDbEntity","oldDbEntity","put","updatedEntityId","openDB","upgrade","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","binaryData","imageUrl","push","window","URL","createObjectURL","Blob","entity","getImageUrl","storeImage","store","indexImage","index","destroyImage","destroy","showImage","key","show","updateImage","update","useShowImage","options","useQuery","createSchema","yup","shape","required","test","fileType","split","pop","includes","Math","floor","size","CreateImage","history","useHistory","handleCancel","onSuccess","useMutation","Tooltip","children","isTootipShow","setTooltipShow","handleOnMouseOver","handleOnMouseLeave","onMouseOver","onMouseLeave","borderColor","card","height","flexDirection","cursor","cardMedia","paddingTop","cardContent","flexGrow","cardButtonsGroup","marginLeft","ImageGridElement","handleRemove","handleClick","Card","CardMedia","CardActions","IconButton","heroContent","backgroundColor","palette","background","paper","heroButtons","marginTop","marginBottom","cardGrid","paddingBottom","ImageList","retry","images","refetch","isFetching","useDestroyImage","mutate","stopPropagation","Fragment","CssBaseline","justify","to","length","View","handleUpdate","ShowImage","useParams","Number","updateSchema","Update","fileList","rest","updateBody","icon","marginRight","footer","padding","link","textDecoration","DashboardLayout","AppBar","Toolbar","noWrap","align","App","basename","process","exact","path","from","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e522472a.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport { Button, Grid, Typography } from \"@material-ui/core\";\n\ninterface Props {\n    register: any;\n    oldPreview?: string;\n}\n\nexport const ImageInput = ({ register, oldPreview }: Props) => {\n    const [preview, setPreview] = useState<string | undefined>();\n\n    const handleUploadFile = useCallback((e) => {\n        const file = e?.target?.files[0];\n        if (file) {\n            const reader = new FileReader();\n\n            reader.onload = e => {\n                if (e && e.target) {\n                    setPreview(e.target.result as string);\n                }\n            }\n\n            reader.readAsDataURL(file); // convert to base64 string\n        }\n    }, [setPreview]);\n\n    const imageForPreview = preview || oldPreview;\n\n    return <>\n        <Grid>\n            {imageForPreview ? <img style={{ width: '100%' }} src={imageForPreview} alt=\"preview\" /> : <Typography>There is no uploaded image.</Typography>}\n        </Grid>\n        <Grid>\n            <Button\n                color=\"primary\"\n                variant=\"outlined\"\n                component=\"label\"\n            >\n                Upload File\n        <input\n                    ref={register}\n                    type=\"file\"\n                    accept=\".png, .jpg, .jpeg\"\n                    style={{ display: \"none\" }}\n                    name=\"image\"\n                    onChange={handleUploadFile}\n                />\n            </Button>\n        </Grid>\n    </>\n}","import React from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { HexColorPicker } from \"react-colorful\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport \"react-colorful/dist/index.css\";\n\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Typography } from \"@material-ui/core\";\n\nimport { ImageInput } from \"../ImageInput\";\nimport styles from './style';\n\nconst useStyles = makeStyles(styles);\n\ninterface Props {\n  onSubmit: (data: any) => void;\n  onCancel: () => void;\n  defaultValues?: {[property: string]: any};\n  oldPreview?: string;\n  schema: any;\n}\n\nexport const ImageForm = ({ onSubmit, onCancel, defaultValues = {}, oldPreview, schema }: Props) => {\n  const { register, handleSubmit, control, errors } = useForm({\n    defaultValues,\n    resolver: yupResolver(schema),\n  });\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"md\">\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <FormControl fullWidth margin=\"normal\">\n              <ImageInput oldPreview={oldPreview} register={register} />\n            </FormControl>\n            <Typography className={classes.errorLabel}>{errors.image?.message}</Typography>\n          </Grid>\n          <Grid item xs={12} sm={12} md={6}>\n            <FormControl fullWidth margin=\"normal\">\n              <TextField inputRef={register} name=\"tooltip.text\" label=\"Toolip text\" variant=\"outlined\" />\n            </FormControl>\n            <Typography className={classes.errorLabel}>{errors.tooltip?.text?.message}</Typography>\n          </Grid>\n          <Grid item xs={12} sm={12} md={6}>\n            <FormControl fullWidth margin=\"normal\">\n              <Controller\n                name=\"tooltip.position\"\n                as={<Select>\n                  <MenuItem value=\"top\">Top</MenuItem>\n                  <MenuItem value=\"right\">Right</MenuItem>\n                  <MenuItem value=\"bottom\">Bottom</MenuItem>\n                  <MenuItem value=\"left\">Left</MenuItem>\n                </Select>}\n                control={control}\n              />\n            </FormControl>\n            <Typography className={classes.errorLabel}>{errors.tooltip?.position?.message}</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <FormControl fullWidth margin=\"normal\">\n              <Typography>Tooltip Color</Typography>\n              <Controller\n                name=\"tooltip.color\"\n                render={({ value, onChange }) => <HexColorPicker color={value} onChange={onChange} />}\n                control={control}\n              />\n            </FormControl>\n            <Typography className={classes.errorLabel}>{errors.tooltip?.color?.message}</Typography>\n          </Grid>\n          <Grid container item xs={12} className={classes.buttonsContainer}>\n            <Button type=\"button\" onClick={onCancel} color=\"primary\" variant=\"outlined\">Back</Button>\n            <Button type=\"submit\" color=\"primary\" variant=\"outlined\">Submit</Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Container>\n  );\n}","import createStyles from '@material-ui/core/styles/createStyles';\nimport { Theme } from '@material-ui/core';\n\nexport default (theme: Theme) => (createStyles({\n  buttonsContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  errorLabel: {\n    color: 'red',\n  },\n}));\n","import { useQuery, MutateConfig, useMutation, QueryConfig } from 'react-query';\n\nimport { TooltipedImage, TooltipedImageEntity } from \"../interfaces\";\nimport { ImageService } from \"../services/FakeImageService\";\n\nconst imageService = new ImageService();\n\n// Substitute methods below for real api\nconst storeImage = (data: TooltipedImage<File>): Promise<TooltipedImageEntity<string>> => imageService.store(data);\nconst indexImage = (): Promise<TooltipedImageEntity<string>[]> => imageService.index();\nconst destroyImage = (id: number): Promise<void> => imageService.destroy(id);\nconst showImage = (key: string, id: number): Promise<TooltipedImageEntity<string>> => imageService.show(id);\nconst updateImage = (data: TooltipedImageEntity<File>): Promise<TooltipedImageEntity<string>> => imageService.update(data);\n\nexport const useStoreImage = (options?: MutateConfig<any>) => useMutation(storeImage, options)\nexport const useUpdateImage = (options?: MutateConfig<any>) => useMutation(updateImage, options)\nexport const useIndexImage = (options?: QueryConfig<any>) => useQuery('indexImage', indexImage, options)\nexport const useDestroyImage = (options?: MutateConfig<any>) => useMutation(destroyImage, options);\nexport const useShowImage = (id: number, options?: QueryConfig<any>) => useQuery(['showImage', id], showImage, options);\n\n","import { openDB, IDBPDatabase } from 'idb';\nimport { TooltipedImage, TooltipedImageEntity } from '../interfaces';\n\n\nexport class ImageService {\n    private db: IDBPDatabase | undefined;\n    private dbName: string = 'imageApp';\n    private imageStoreName: string = 'images';\n\n    public async store(data: TooltipedImage<File>): Promise<TooltipedImageEntity> {\n        const db = await this.initDb();\n        const entityId = await db.add(this.imageStoreName, data);\n        const dbEntity = await db.get(this.imageStoreName, entityId);\n\n        return this.substituteImageWithUrl(dbEntity);\n    }\n\n    public async destroy(id: number): Promise<void> {\n        const db = await this.initDb();\n\n        return db.delete(this.imageStoreName, id);\n    }\n\n    public async show(id: number): Promise<TooltipedImageEntity> {\n        const db = await this.initDb();\n        const dbEntity = await db.get(this.imageStoreName, id);\n\n        return this.substituteImageWithUrl(dbEntity);\n    }\n\n    public async index(): Promise<TooltipedImageEntity<string>[]> {\n        const db = await this.initDb();\n        const imageDbEntities = await db.getAll(this.imageStoreName);\n        const imagesWithLink = imageDbEntities.map((imageDbEntity: TooltipedImageEntity<File>) => this.substituteImageWithUrl(imageDbEntity));\n\n        return imagesWithLink;\n    }\n\n    public async update(data: TooltipedImageEntity<File>): Promise<TooltipedImageEntity<string>> {\n        const db = await this.initDb();\n        const oldDbEntity = await db.get(this.imageStoreName, data.id);\n        if (!data.image) {\n            data.image = oldDbEntity.image;\n        }\n        const updatedEntityId = await db.put(this.imageStoreName, data);\n        const dbEntity = await db.get(this.imageStoreName, updatedEntityId);\n\n        return this.substituteImageWithUrl(dbEntity);\n    }\n\n    public async initDb() {\n        const imageStoreName = this.imageStoreName;\n\n        if (this.db) return this.db;\n        this.db = await openDB(this.dbName, 1, {\n            upgrade(db) {\n                if (!db.objectStoreNames.contains(imageStoreName)) {\n                    db.createObjectStore(imageStoreName, { keyPath: 'id', autoIncrement: true });\n                }\n            }\n        });\n\n        return this.db;\n    }\n\n    private getImageUrl(image: File): string {\n        const binaryData = [];\n        let imageUrl = '';\n        binaryData.push(image);\n        if (image) {\n            imageUrl = window.URL.createObjectURL(new Blob(binaryData, { type: image.type }))\n        }\n\n        return imageUrl;\n    }\n\n    private substituteImageWithUrl(entity: TooltipedImageEntity<File>): TooltipedImageEntity<string> {\n        const imageUrl = this.getImageUrl(entity.image);\n\n        return {\n            ...entity,\n            image: imageUrl,\n        }\n    }\n}","import * as yup from 'yup';\n\nexport const createSchema = yup.object().shape({\n    tooltip: yup.object().shape({\n        text: yup.string().required(),\n        color: yup.string().required(),\n        position: yup.string().required(),\n    }),\n    image: yup.mixed().required()\n        .test('fileType', 'File is Required. Allowed file types: jpeg, jpg, png; allowed file size < 5mb', value => {\n            const file = value[0];\n            if (!file) return false;\n            const fileType = file.name.split('.').pop();\n\n            if(!['jpeg', 'jpg', 'png'].includes(fileType)) return false;\n\n            const mbs = Math.floor(file.size/1000000);\n\n            return mbs < 5;\n        })\n});\n  ","import React, { useCallback } from 'react'\nimport { useHistory } from 'react-router-dom';\n\nimport { ImageForm } from '../../../components/image/components/Form/Form'\nimport { useStoreImage } from '../../../components/image/hooks/crud';\nimport { TooltipedImage } from '../../../components/image/interfaces';\nimport { createSchema } from '../../../components/image/schemas/create.schema';\n\nconst defaultValues = {\n    tooltip: {\n        color: 'rgb(0, 0, 0)',\n        position: 'top',\n    }\n};\n\nexport const CreateImage = () => {\n    const history = useHistory();\n    const handleCancel = useCallback(() => history.push('/'), [history]);\n    const [storeImage] = useStoreImage({ onSuccess: () => history.push('/') });\n    const handleSubmit = useCallback((data: TooltipedImage<FileList>) => {\n        const image = data.image[0];\n        storeImage({ ...data, image });\n    }, [storeImage])\n\n    return <div>\n        <ImageForm schema={createSchema} onCancel={handleCancel} defaultValues={defaultValues} onSubmit={handleSubmit} />\n    </div>;\n}","import React, { useCallback, useState, ReactNode } from 'react';\n\nimport './styles.css'\n\ninterface Props {\n    children: ReactNode;\n    position: 'top' | 'right' | 'left' | 'bottom';\n    color: string;\n    text: string;\n}\n\nexport const Tooltip = ({ children, position, color, text }: Props) => {\n    const [isTootipShow, setTooltipShow] = useState<boolean>(false);\n    const handleOnMouseOver = useCallback(() => setTooltipShow(true), [setTooltipShow]);\n    const handleOnMouseLeave = useCallback(() => setTooltipShow(false), [setTooltipShow]);\n\n    return <div className=\"tooltip-container\">\n        <div onMouseOver={handleOnMouseOver} onMouseLeave={handleOnMouseLeave}>{children}</div>\n        {isTootipShow && <div style={{ color, borderColor: color }} className={`tooltip tooltip-${position}`}>{text}</div>}\n    </div>;\n}","import React, { SyntheticEvent } from 'react';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nimport { Tooltip } from '../../../tooltip/components/Tooltip';\nimport { TooltipedImageEntity } from '../../interfaces';\nimport styles from './styles';\n\nconst useStyles = makeStyles(styles);\n\ninterface Props {\n  image: TooltipedImageEntity;\n  handleRemove: (e: SyntheticEvent, id: number) => void;\n  handleClick: (id: number) => void;\n}\n\nexport const ImageGridElement = ({ image, handleRemove, handleClick }: Props) => {\n  const classes = useStyles();\n\n  return <Grid item xs={12} sm={6} md={4}>\n    <Tooltip {...image.tooltip} >\n      <Card className={classes.card} onClick={() => handleClick(image.id)}>\n        <CardMedia\n          className={classes.cardMedia}\n          image={image.image}\n        />\n        <CardActions className={classes.cardButtonsGroup}>\n          <IconButton onClick={e => handleRemove(e, image.id)} size=\"small\" color=\"primary\">\n            <DeleteIcon />\n          </IconButton>\n        </CardActions>\n      </Card>\n    </Tooltip>\n  </Grid>\n}","import createStyles from '@material-ui/core/styles/createStyles';\nimport { Theme } from '@material-ui/core';\n\nexport default (theme: Theme) => (createStyles({\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    cursor: 'pointer',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  cardButtonsGroup: {\n    marginLeft: 'auto',\n  }\n}));\n","import React, { SyntheticEvent, useCallback } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { Typography } from '@material-ui/core';\n\nimport { useDestroyImage, useIndexImage } from '../../../components/image/hooks/crud';\nimport { TooltipedImageEntity } from '../../../components/image/interfaces';\nimport { ImageGridElement } from '../../../components/image/components/GridElement';\nimport styles from './styles';\n\nconst useStyles = makeStyles(styles);\n\nexport const ImageList = () => {\n  const history = useHistory();\n  const classes = useStyles();\n\n  const { data: images = [], refetch, isFetching } = useIndexImage({ retry: false });\n  const [mutate] = useDestroyImage({ onSuccess: refetch });\n  const handleRemove = useCallback((e: SyntheticEvent, id: number) => {\n    mutate(id);\n    e.stopPropagation();\n  }, [mutate]);\n  const handleClick = useCallback((id: number) => history.push(`/images/${id}`), [history]);\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <div className={classes.heroContent}>\n        <Container maxWidth=\"sm\">\n          <div className={classes.heroButtons}>\n            <Grid container spacing={2} justify=\"center\">\n              <Grid item>\n                <Link to=\"/images/create\">\n                  <Button variant=\"contained\" color=\"primary\">\n                    Add image\n                  </Button>\n                </Link>\n              </Grid>\n            </Grid>\n          </div>\n        </Container>\n      </div>\n\n      <Container className={classes.cardGrid} maxWidth=\"md\">\n        {isFetching ? <Typography>Loading ...</Typography> : (images.length ? <Grid container spacing={4}>\n          {images.map((image: TooltipedImageEntity) => <ImageGridElement handleClick={handleClick} key={image.id} image={image} handleRemove={handleRemove} />)}\n        </Grid> : 'There is no images. You can add them by pressed on \\'Add Image\\' button.')}\n      </Container>\n    </React.Fragment>\n  );\n}\n","import createStyles from '@material-ui/core/styles/createStyles';\nimport { Theme } from '@material-ui/core';\n\nexport default (theme: Theme) => (createStyles({\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  heroButtons: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n}));\n","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\n\nimport { TooltipedImageEntity } from '../../interfaces';\n\ninterface Props {\n    image: TooltipedImageEntity;\n    handleUpdate: () => void;\n}\n\nexport const View = ({ image, handleUpdate }: Props) => {\n    return <Container maxWidth=\"md\">\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <img style={{ width: '100%' }} alt=\"img\" src={image.image} />\n            </Grid>\n            <Grid item xs={12} sm={12} md={6}>\n                <Typography variant=\"h6\">Tooltip text</Typography>\n                <Typography>{image.tooltip.text}</Typography>\n            </Grid>\n            <Grid item xs={12} sm={12} md={6}>\n                <Typography variant=\"h6\">Tooltip position</Typography>\n                <Typography>{image.tooltip.position}</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant=\"h6\">Tooltip color</Typography>\n                <Typography style={{ color: image.tooltip.color }}>{image.tooltip.color}</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Button variant=\"outlined\" color=\"primary\" onClick={handleUpdate}>Update</Button>\n            </Grid>\n        </Grid>\n    </Container>;\n}","import React, { useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { View } from '../../../components/image/components/VIew';\nimport { useShowImage } from '../../../components/image/hooks/crud';\n\nexport const ShowImage = () => {\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n    const { data } = useShowImage(Number(id));\n    const handleUpdate = useCallback(() => history.push(`/images/${id}/update`), [history, id]);\n\n    return data ? <View image={data} handleUpdate={handleUpdate} /> : null;\n}","import * as yup from 'yup';\n\nexport const updateSchema = yup.object().shape({\n    tooltip: yup.object().shape({\n        text: yup.string().required(),\n        color: yup.string().required(),\n        position: yup.string().required(),\n    }),\n    image: yup.mixed().required()\n        .test('fileType', 'Wrong file type, allowed: jpeg, jpg, png', value => {\n            const file = value[0];\n            if (!file) return true;\n            const fileType = file.name.split('.').pop();\n\n            return ['jpeg', 'jpg', 'png'].includes(fileType);\n        })\n        .test('fileSize', 'Image should be less then 5 mb', value => {\n            const file = value[0];\n            if (!file) return true;\n            const mbs = Math.floor(file.size/1000000);\n\n            return mbs < 5;\n        }),\n});\n  ","import React, { useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { useShowImage, useUpdateImage } from '../../../components/image/hooks/crud';\nimport { TooltipedImage } from '../../../components/image/interfaces';\nimport { ImageForm } from '../../../components/image/components/Form';\nimport { updateSchema } from '../../../components/image/schemas/update.schema';\n\nexport const Update = () => {\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n    const { data } = useShowImage(Number(id));\n    const handleCancel = useCallback(() => history.push(`/images/${id}`), [history, id]);\n    const [updateImage] = useUpdateImage({ onSuccess: () => history.push('/') });\n    const handleSubmit = useCallback((data: TooltipedImage<FileList>) => {\n        const { image: fileList, ...rest } = data;\n        const image = fileList[0];\n        const updateBody = rest as TooltipedImage<File>;\n        if (image) {\n            updateBody.image = image\n        }\n        updateImage({ id: Number(id), ...updateBody });\n    }, [updateImage, id])\n\n    return <div>\n        {data && <ImageForm schema={updateSchema} oldPreview={data.image} onCancel={handleCancel} onSubmit={handleSubmit} defaultValues={{ tooltip: data.tooltip }} />}\n    </div>;\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport AppBar from '@material-ui/core/AppBar';\nimport CameraIcon from '@material-ui/icons/PhotoCamera';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport styles from './styles';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\nconst useStyles = makeStyles(styles);\n\nexport const DashboardLayout = ({ children }: Props) => {\n    const classes = useStyles();\n\n    return <>\n            <CssBaseline />\n            <AppBar position=\"relative\">\n      <Toolbar>\n        <CameraIcon className={classes.icon} />\n        <Link to=\"/\" className={classes.link} >\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Image Manager\n          </Typography>\n        </Link>\n      </Toolbar>\n    </AppBar>\n    <main>\n        {children}\n    </main>\n    <footer className={classes.footer}>\n      <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n        Image manager, 2020\n      </Typography>\n    </footer>\n    </>\n}","import createStyles from '@material-ui/core/styles/createStyles';\nimport { Theme } from '@material-ui/core';\n\nexport default (theme: Theme) =>\n  createStyles({\n    icon: {\n        marginRight: theme.spacing(2),\n      },\n      heroContent: {\n        backgroundColor: theme.palette.background.paper,\n      },\n      heroButtons: {\n        marginTop: theme.spacing(4),\n      },\n      footer: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(6),\n      },\n      link: {\n        color: 'white',\n        textDecoration: 'none',\n      },\n  });\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport { CreateImage } from '../Image/Create';\nimport { ImageList } from '../Image/List';\nimport { ShowImage } from '../Image/Show';\nimport { Update } from '../Image/Update';\nimport { DashboardLayout } from '../../components/layouts/components/DashboardLayout';\n\nexport function App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <DashboardLayout>\n        <Switch>\n          <Route exact path=\"/images\">\n            <ImageList />\n          </Route>\n          <Route exact path=\"/images/create\">\n            <CreateImage />\n          </Route>\n          <Route exact path=\"/images/:id\">\n            <ShowImage />\n          </Route>\n          <Route exact path=\"/images/:id/update\">\n            <Update />\n          </Route>\n          <Redirect exact from=\"/\" to=\"/images\" />\n        </Switch>\n      </DashboardLayout>\n    </Router>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}